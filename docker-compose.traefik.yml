version: '3.8'

services:
  # Traefik - Reverse Proxy avec SSL automatique
  traefik:
    image: traefik:v3.0
    container_name: portfolio-traefik
    command:
      # Configuration API et dashboard
      - "--api.dashboard=true"
      - "--api.insecure=false"
      
      # Configuration des entry points
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      
      # Redirection HTTP vers HTTPS
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      
      # Configuration Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traefik-network"
      
      # Configuration Let's Encrypt
      - "--certificatesresolvers.letsencrypt.acme.email=votre-email@gmail.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      
      # Logs
      - "--log.level=INFO"
      - "--accesslog=true"
    ports:
      - "80:80"     # HTTP
      - "443:443"   # HTTPS
      - "8080:8080" # Dashboard Traefik (optionnel)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_acme:/acme.json
    networks:
      - traefik-network
    labels:
      # Dashboard Traefik (optionnel - pour administration)
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$2y$$10$$7yMN7ZKE.Kl3QK5Z5.Kl3QK5Z5.Kl3QK5Z5.Kl3QK5Z5"
    restart: unless-stopped

  # Frontend Portfolio Principal
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: portfolio-frontend
    environment:
      - NUXT_HOST=0.0.0.0
      - NUXT_PORT=3000
      - API_URL=http://backend:3001
      - NODE_ENV=production
    depends_on:
      - backend
      - traefik
    networks:
      - traefik-network
      - portfolio-network
    labels:
      # Configuration Traefik pour le domaine principal
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-network"
      
      # Router principal (domaine racine)
      - "traefik.http.routers.portfolio.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.portfolio.entrypoints=websecure"
      - "traefik.http.routers.portfolio.tls.certresolver=letsencrypt"
      - "traefik.http.routers.portfolio.service=portfolio"
      - "traefik.http.services.portfolio.loadbalancer.server.port=3000"
      
      # Middleware de sécurité
      - "traefik.http.routers.portfolio.middlewares=security-headers"
      - "traefik.http.middlewares.security-headers.headers.customRequestHeaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.security-headers.headers.customRequestHeaders.X-Forwarded-For="
      - "traefik.http.middlewares.security-headers.headers.customRequestHeaders.X-Real-IP="
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: portfolio-backend
    environment:
      - PORT=3001
      - FRONTEND_URL=https://${DOMAIN:-localhost}
      - NODE_ENV=production
    env_file:
      - ./backend/.env
    networks:
      - traefik-network
      - portfolio-network
    labels:
      # Configuration Traefik pour l'API
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-network"
      
      # Router API (sous-domaine api)
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.services.api.loadbalancer.server.port=3001"
      
      # Middleware CORS et rate limiting
      - "traefik.http.routers.api.middlewares=api-cors,api-ratelimit"
      - "traefik.http.middlewares.api-cors.headers.accessControlAllowOriginList=https://${DOMAIN:-localhost}"
      - "traefik.http.middlewares.api-cors.headers.accessControlAllowMethods=GET,POST,OPTIONS"
      - "traefik.http.middlewares.api-cors.headers.accessControlAllowHeaders=Content-Type,Authorization"
      - "traefik.http.middlewares.api-ratelimit.ratelimit.burst=10"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Exemple de projet 1 - Vous pouvez dupliquer cette section pour d'autres projets
  project1:
    image: nginx:alpine
    container_name: portfolio-project1
    volumes:
      - ./projects/project1:/usr/share/nginx/html:ro
    networks:
      - traefik-network
    labels:
      # Configuration Traefik pour projet1
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-network"
      
      # Router projet1 (sous-domaine)
      - "traefik.http.routers.project1.rule=Host(`project1.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.project1.entrypoints=websecure"
      - "traefik.http.routers.project1.tls.certresolver=letsencrypt"
      - "traefik.http.routers.project1.service=project1"
      - "traefik.http.services.project1.loadbalancer.server.port=80"
    restart: unless-stopped

  # Exemple de projet 2 - Application Node.js
  project2:
    image: node:18-alpine
    container_name: portfolio-project2
    working_dir: /app
    command: ["npm", "start"]
    volumes:
      - ./projects/project2:/app:ro
    networks:
      - traefik-network
    labels:
      # Configuration Traefik pour projet2
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-network"
      
      # Router projet2 (sous-domaine)
      - "traefik.http.routers.project2.rule=Host(`project2.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.project2.entrypoints=websecure"
      - "traefik.http.routers.project2.tls.certresolver=letsencrypt"
      - "traefik.http.routers.project2.service=project2"
      - "traefik.http.services.project2.loadbalancer.server.port=3000"
    restart: unless-stopped

networks:
  traefik-network:
    external: true
  portfolio-network:
    driver: bridge

volumes:
  traefik_acme:
    driver: local
